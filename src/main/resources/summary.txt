===== static/css/clock.css =====

/* Digital Clock */
#utc-date {
  margin-top: 4px;
  font-size: 12px;
  letter-spacing: 0.5px;
  font-weight: bold;
  color: var(--accent);
}

#digital-clock-wrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 20px;
}

.digital-clock {
  display: flex;
  gap: 6px;
  justify-content: center;
  flex-wrap: wrap;
  padding: 6px 10px;
  border: 1px solid var(--border-color);
  border-radius: var(--radius);
  background-color: var(--dark-bg);
  box-shadow: 0 0 8px var(--accent);
}

.digit {
  display: inline-block;
  width: 16px;
  height: 32px;
  position: relative;
}

.segment {
  position: absolute;
  width: 3px;
  height: 12px;
  background: #333;
  transition: background 0.2s;
}

.on {
  background: var(--accent);
}

.seg-a { top: 0; left: 2px; width: 12px; height: 3px; }
.seg-b { top: 1px; right: 0; }
.seg-c { bottom: 1px; right: 0; }
.seg-d { bottom: 0; left: 2px; width: 12px; height: 3px; }
.seg-e { bottom: 1px; left: 0; }
.seg-f { top: 1px; left: 0; }
.seg-g { top: 14px; left: 2px; width: 12px; height: 3px; }

.colon {
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  align-items: center;
  height: 32px;
  width: 6px;
}

.colon div {
  width: 3px;
  height: 3px;
  background: var(--accent);
  border-radius: 50%;
}

.label {
  font-size: 12px;
  color: var(--text);
  margin-top: 4px;
}

===== static/css/header.css =====
:root {
  --main-bg: #000;
  --dark-bg: #1a1a1a;
  --light-bg: #333;
  --accent: #0f0;
  --text: #0f0;
}

body {
  background-color: var(--main-bg);
  color: var(--text);
  font-family: 'Courier New', Courier, monospace;
}

/* Navigation styles */
nav {
  margin-bottom: 15px;
}

nav ul {
  display: flex;
  list-style: none;
  justify-content: space-around;
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  background: var(--dark-bg);
  border-bottom-left-radius: 30px;
  border-bottom-right-radius: 30px;
  box-shadow: 0 4px 8px rgba(0, 255, 0, 0.2);
}

nav a {
  text-decoration: none;
  color: inherit !important;
  padding: 10px 22px;
  border-radius: 20px;
  display: inline-block;
  font-weight: 500;
  transition: background-color 0.3s ease;
}

nav ul li:hover a {
  background-color: var(--light-bg);
  color: var(--text) !important;
}

nav .active a {
  background-color: var(--accent);
  color: black !important;
}

===== static/css/chat.css =====
form * {
    margin: unset !important;
}

html,
body {
    height: 100%;
    margin: 0;
    padding: 0;
}

body {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    width: 100%;
    max-width: 900px;
    margin: 0 auto;
}

footer {
    flex-shrink: 0 !important;
    padding: 10px 0 !important;
    margin-top: 10px;
}

/* Chat Area */
.chat {
    overflow: scroll;
    flex: 1;
    display: flex;
    flex-direction: column;
}

/* Message List */
#messageArea {
    flex-grow: 1;
    overflow-y: auto;
    background-color: var(--dark-bg);
    border-radius: var(--radius);
    margin: 10px 0;
    padding: 10px;
    font-family: "Segoe UI", "Segoe UI Emoji", "Apple Color Emoji", "Noto Color Emoji", sans-serif;
    font-size: 16px;
    line-height: 1.5;
}

/* Universal Emoji Styling in Chat (with size constraints) */
#messageArea li span.emoji,
#messageArea li img.emoji,
#messageArea li .emoji {
    display: inline-block !important;
    vertical-align: middle !important;
    object-fit: contain !important;

    /* Allow natural size within bounds */
    min-width: 10px !important;
    min-height: 10px !important;
    max-width: 75px !important;
    max-height: 75px !important;

    width: auto !important;
    height: auto !important;
    line-height: 1 !important;
}

#messageArea li {
    font-size: 16px;
    line-height: 1.5;
}

/* Input Controls */
.chat-controls {
    width: 100% !important;
    box-sizing: border-box !important;
    margin-bottom: 10px; 
}

#chatForm {
    display: flex !important;
    width: 100% !important;
}

.input-and-buttons-container {
    display: flex !important;
    flex-grow: 1 !important;
    align-items: center !important;
    gap: 5px !important;
}

#messageInputContainer {
    position: relative;
    flex-grow: 1;
    display: block;
}

#messageInput {
    width: 100%;
    box-sizing: border-box;
    padding-right: 5px;
}

.input-and-buttons-container * {
    align-self: stretch;
    padding: 5px;
    border-radius: 5px;
    border: none;
    background-color: var(--dark-bg);
    color: var(--text);
}

/* Emoji Picker */
#emojiPicker {
    background-color: var(--main-bg) !important;
    position: absolute !important;
    bottom: 100% !important;
    right: 0 !important;
    width: 210px !important;
    max-height: 300px !important;
    flex-wrap: wrap !important;
    justify-content: flex-start !important;
    align-content: flex-start !important;
    border: 1px solid var(--border-color);
    border-radius: 5px !important;
    padding: 5px !important;
    z-index: 1000 !important;
    overflow-y: auto !important;
}

#emojiPicker .emoji-button {
    flex: 0 0 45px !important;
    width: 45px !important;
    height: 45px !important;
    margin: 2px !important;
    border: none !important;
    cursor: pointer !important;
    padding: 0 !important;
    display: flex !important;
    justify-content: center !important;
    align-items: center !important;
    border-radius: 3px;
}

#emojiPicker .emoji-button img {
    width: 32px !important;
    height: 32px !important;
    object-fit: contain !important;
}

/* Emoji Button Hover */
button.emoji-button:hover {
    background-color: var(--light-bg) !important;
}

/* Suggestion Box */
#suggestionBox {
    position: absolute;
    bottom: 100%;
    left: 0;
    width: 100%;
    transform: translateY(-5px);
    z-index: 1000;
    display: none;
    max-height: 150px;
    overflow-y: auto;
    padding: 5px;
    border-radius: 4px;
    font-family: monospace;
    background-color: var(--main-bg) !important;
    border: 1px solid var(--border-color) !important;
}

.emoji-suggestion,
.mention-suggestion {
    padding: 6px 8px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    background-color: var(--dark-bg) !important;
    margin: 5px 3px !important;
}

.emoji-suggestion:last-child,
.mention-suggestion:last-child {
    border-bottom: none;
}

.emoji-suggestion:hover {
    background-color: var(--border-color) !important;
}

img.emoji {
    background-color: var(--light-bg) !important;
    vertical-align: middle !important;

    /* Constrained size range */
    min-width: 20px !important;
    min-height: 20px !important;
    max-width: 75px !important;
    max-height: 75px !important;

    width: auto !important;
    height: auto !important;
    object-fit: contain !important;
}

/* General image handling in chat */
img {
    width: 80% !important;
    margin-left: 22px !important;
    border-radius: 10px;
    background-color: var(--light-bg);
}

===== static/css/register.css =====
:root {
  --main-bg: #011627;
  --dark-bg: #000e1f;
  --light-bg: #0b253b;
  --text: #d6deeb;
  --accent: #82aaff;
  --heading: #ffffff;
  --opacity: 50%;
  --border-color: color-mix(in srgb, currentColor var(--opacity), transparent);
  --radius: 10px;
  --table-border-width: 1px;
}

* {
  box-sizing: border-box;
}

body {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  margin: 0;
}

main#container {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 20px;
}

#register {
  background-color: var(--dark-bg);
  width: 100%;
  max-width: 400px;
  display: flex;
  flex-direction: column;
  padding: 20px;
  border-radius: 10px;
}

#register h2 {
  margin: 10px 0;
  text-align: center;
  color: var(--heading);
}

#register input[type="text"],
#register input[type="password"] {
  width: 100%;
  padding: 9px;
  margin: 10px 0;
  border-radius: 5px;
  background-color: var(--light-bg);
  border: none;
  color: var(--text);
}

.tooltip-box {
  font-size: 12px;
  color: var(--text);
  background-color: var(--light-bg);
  padding: 8px;
  border-radius: 5px;
  border: 1px solid var(--border-color);
  margin: 15px 0px;
  text-align: center;
}

.btn-row {
  display: flex;
  gap: 10px;
  justify-content: center;
  margin-top: 10px;
}

.btn-row button {
  flex: 1;
  color: var(--accent);
  border: 1px solid var(--accent);
  background-color: var(--dark-bg);
  padding: 7px 15px;
  border-radius: 5px;
  text-align: center;
  cursor: pointer;
  transition: 0.3s ease;
}

.btn-row button:hover {
  background-color: var(--accent);
  color: black;
}

@media (max-width: 480px) {
  #register {
    padding: 15px;
    border-radius: 8px;
  }

  #register input {
    padding: 8px;
  }

  .btn-row {
    flex-direction: column;
  }
  .checkbox-row {
  text-align: center;
  margin: 10px 0;
  color: var(--text);
  font-size: 14px;
}

}

===== static/css/login.css =====
:root {
    --dark-bg: #1e1e1e;
    --light-bg: #f9f9f9;
    --accent: #4caf50;
    --text: #ffffff;
}


* {
    box-sizing: border-box;
}

body {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    margin: 0;
}

main#container {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 20px;
}

#login {
    background-color: var(--dark-bg);
    width: 100%;
    max-width: 400px;
    display: flex;
    flex-direction: column;
    padding: 20px;
    border-radius: 10px;
}

#login h2 {
    margin: 10px 0;
    text-align: center;
}
#login input {
    width: 100%;
    padding: 9px;
    margin: 10px 0;
    border-radius: 5px;
    background-color: var(--light-bg);
    border: none;
    color: var(--text);
}


#login .btn-container {
    display: flex;
    justify-content: center;
}

#login button {
    color: var(--accent);
    border: 1px solid var(--accent);
    background-color: var(--dark-bg);
    padding: 7px 15px;
    margin: 10px auto;
    border-radius: 5px;
    text-align: center;
    cursor: pointer;
    transition: 0.3s ease;
}

#login button:hover {
    background-color: var(--accent);
    color: black;
}

/* Responsive tweaks */
@media (max-width: 480px) {
    #login {
        padding: 15px;
        border-radius: 8px;
    }

    #login input {
        padding: 8px;
    }

    #login button {
        padding: 6px 12px;
    }
}

===== static/css/style.css =====
:root {
  --main-bg: #011627;
  --dark-bg: #000e1f;
  --light-bg: #0b253b;
  --text: #d6deeb;
  --accent: #82aaff;
  --heading: #ffffff;
  --opacity: 50%;
  --border-color: color-mix(in srgb, currentColor var(--opacity), transparent);
  --radius: 10px;
  --table-border-width: 1px;
}

body {
  background-color: var(--main-bg);
  color: var(--text);
}
* {
  box-sizing: border-box;
  outline: none;
  margin: 0;
  padding: 0;
}

*::selection {
  background-color: var(--accent);
  color: black;
}

@import url("https://fonts.googleapis.com/css2?family=Playfair+Display:wght@500;700&family=Inter:wght@400;600&family=Fira+Code&display=swap");

/* Base font */
* {
  font-family: "Inter", sans-serif !important;
}

===== static/css/footer.css =====

footer {
  width: 100%;
  max-width: 700px;
  text-align: center;
  margin: 0 auto;
  background-color: var(--dark-bg);
  padding: 10px; /* Reduced from 20px */
  border-top-right-radius: 20px; /* Optional: slightly smaller curve */
  border-top-left-radius: 20px;
  font-size: 13px; /* Optional: reduce overall text size */
}

/* Digital Clock */
#utc-date {
  margin-top: 4px;
  font-size: 12px;
  letter-spacing: 0.5px;
  font-weight: bold;
  color: var(--accent);
}

#digital-clock-wrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 20px;
}

.digital-clock {
  display: flex;
  gap: 6px;
  justify-content: center;
  flex-wrap: wrap;
  padding: 6px 10px;
  border: 1px solid var(--border-color);
  border-radius: var(--radius);
  background-color: var(--dark-bg);
  box-shadow: 0 0 8px var(--accent);
}

.digit {
  display: inline-block;
  width: 16px;
  height: 32px;
  position: relative;
}

.segment {
  position: absolute;
  width: 3px;
  height: 12px;
  background: #333;
  transition: background 0.2s;
}

.on {
  background: var(--accent);
}

.seg-a { top: 0; left: 2px; width: 12px; height: 3px; }
.seg-b { top: 1px; right: 0; }
.seg-c { bottom: 1px; right: 0; }
.seg-d { bottom: 0; left: 2px; width: 12px; height: 3px; }
.seg-e { bottom: 1px; left: 0; }
.seg-f { top: 1px; left: 0; }
.seg-g { top: 14px; left: 2px; width: 12px; height: 3px; }

.colon {
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  align-items: center;
  height: 32px;
  width: 6px;
}

.colon div {
  width: 3px;
  height: 3px;
  background: var(--accent);
  border-radius: 50%;
}

.label {
  font-size: 12px;
  color: var(--text);
  margin-top: 4px;
}

===== static/js/emoji-utils.js =====
export function replaceEmojiShortcodes(text) {
    return text.replace(/:([a-zA-Z0-9_+-]+):/g, (match, emojiName) => {
        const safeName = emojiName.replace(/[^a-zA-Z0-9_+-]/g, '');
        const src = `/images/emojis/${safeName}.gif`;

        return `
            <img 
                src="${src}" 
                alt=":${safeName}:" 
                class="emoji" 
                onerror="this.outerHTML=':${safeName}:';"
            >
        `;
    });
}

===== static/js/chat-main.js =====
import { connectAndSubscribe } from "./socket-handler.js";
import {
  setupFormSubmission,
  setupFileUpload,
  setupClipboard,
} from "./file-handler.js";
import { getSharedKey, decryptMessage } from "./crypto-utils.js";
import { renderMessage, scrollToBottom } from "./ui-utils.js";

document.addEventListener("DOMContentLoaded", async function () {
  const username = window.chatConfig.username;
  const usernames = window.chatUsernames || [];

  // --- Notification Sound and Title Flickering Setup ---
  // Ensure you have a 'notification.mp3' file in your 'public/sounds/' directory,
  // or update this path to your sound file.
  const notificationSound = new Audio("/sounds/notification.mp3");
  notificationSound.volume = 0.7; // Adjust volume as needed (0.0 to 1.0)

  const originalTitle = document.title;
  let titleFlickerInterval;
  let isFlickering = false;

  /**
   * Starts the page title flickering.
   */
  function startTitleFlicker() {
    if (isFlickering) return; // Prevent multiple intervals
    isFlickering = true;

    let isNewMessageTitle = true;
    titleFlickerInterval = setInterval(() => {
      if (isNewMessageTitle) {
        document.title = "✨  New Message(s) ! ✨"; // New message alert title
      } else {
        document.title = originalTitle; // Original page title
      }
      isNewMessageTitle = !isNewMessageTitle;
    }, 800); // Flicker every 800 milliseconds
  }

  /**
   * Stops the page title flickering and resets the title.
   */
  function stopTitleFlicker() {
    if (titleFlickerInterval) {
      clearInterval(titleFlickerInterval);
      document.title = originalTitle; // Reset title to original
      isFlickering = false;
    }
  }

  // Listen for tab focus/blur events to stop flickering
  document.addEventListener("visibilitychange", () => {
    if (!document.hidden) {
      // Tab is now active (visible)
      stopTitleFlicker();
    }
    // Title flickering is started only by new incoming messages/mentions when tab is hidden
  });

  /**
   * Requests permission from the user to display browser notifications.
   */
  function requestNotificationPermission() {
    // Check if Notification API is supported by the browser
    if (!("Notification" in window)) {
      console.warn("Notifications not supported by this browser.");
      return;
    }

    // If permission is already granted, log and return
    if (Notification.permission === "granted") {
      console.log("Notification permission already granted.");
      return;
    }

    // If permission is 'default' (not yet asked or dismissed), request it
    if (Notification.permission === "default") {
      Notification.requestPermission().then((permission) => {
        if (permission === "granted") {
          console.log("Notification permission granted.");
        } else {
          console.warn("Notification permission denied or dismissed.");
        }
      });
    }
    // If permission is 'denied', inform the user
    else if (Notification.permission === "denied") {
      console.warn(
        "Notification permission previously denied. Please enable in browser settings."
      );
    }
  }

  /**
   * Checks a message for mentions, and triggers appropriate notifications (desktop, sound, title flicker).
   * This function is made globally accessible via `window.checkForMentions` for use by `socket-handler.js`.
   *
   * @param {string} sender - The sender's username.
   * @param {string} messageText - The decrypted text content of the message.
   * @param {string} currentUser - The username of the current logged-in user.
   */
  window.checkForMentions = function (sender, messageText, currentUser) {
    // Do not notify if the message was sent by the current user themselves
    if (sender === currentUser) {
      return;
    }

    const mentionedCurrentUser = messageText.includes(`@${currentUser}`);
    const mentionedEveryone = messageText.includes("@everyone");

    const shouldNotify = mentionedCurrentUser || mentionedEveryone;

    // Trigger sound and title flicker if tab is hidden, regardless of desktop notification permission,
    // or if it's a mention and the tab is hidden.
    if (document.hidden || shouldNotify) {
      // Always play sound and flicker if hidden, or if it's a mention
      notificationSound
        .play()
        .catch((e) => console.error("Error playing sound:", e));
      startTitleFlicker();
    }

    // Try to show desktop notification if permissions allow and tab is hidden
    if (
      "Notification" in window &&
      Notification.permission === "granted" &&
      document.hidden
    ) {
      if (shouldNotify) {
        console.log(
          `Mention detected for ${currentUser}. Showing desktop notification.`
        );
        const notification = new Notification("New Mention in Chat", {
          body: `${sender}: ${messageText}`,
          icon: "/images/chat-icon.png", // Path to your chat icon
        });
        // Auto-close notification after a few seconds
        setTimeout(() => notification.close(), 5000);
      }
    }
  };

  // Add a click listener to the message area for easy @mentions
  document.getElementById("messageArea").addEventListener("click", (e) => {
    // Find the closest element with class 'message-sender' to get the sender's name
    const senderElement = e.target.closest(".message-sender");
    if (senderElement && senderElement.textContent) {
      const senderName = senderElement.textContent.trim(); // Trim to remove whitespace
      const messageInput = document.getElementById("messageInput");

      // Add @username to the input, ensuring it's not already there and adding a space
      const nameToAdd = senderName.startsWith("@")
        ? senderName
        : `@${senderName}`;
      if (!messageInput.value.includes(nameToAdd)) {
        // Prevent adding same mention multiple times
        messageInput.value += `${nameToAdd} `;
        messageInput.focus(); // Focus the input field after adding mention
      }
    }
  });

  // Request notification permission when the page loads
  requestNotificationPermission();

  // Establish WebSocket connection and set up various handlers
  await connectAndSubscribe(username);
  setupFormSubmission(username);
  setupFileUpload(username);
  setupClipboard(username);

  // Decrypt and render persisted (historical) messages on page load
  const key = await getSharedKey();
  const persistedMessages = document.querySelectorAll("#messageArea li");
  for (const li of persistedMessages) {
    const { sender = "unknown", iv, content, timestamp } = li.dataset;
    try {
      const decryptedBytes = await decryptMessage(key, iv, content);
      renderMessage(li, sender, "text", timestamp, decryptedBytes);
    } catch (e) {
      console.error(`Failed to decrypt message from ${sender}:`, e);
      // Render a placeholder if decryption fails
      renderMessage(
        li,
        sender,
        "text",
        timestamp,
        new TextEncoder().encode("[decryption failed]")
      );
    }
  }

  // Scroll to the bottom of the message area to show the latest messages
  scrollToBottom();

  // --- Emoji Picker Functionality ---
  const emojiToggleBtn = document.getElementById("emojiToggleBtn");
  const emojiPicker = document.getElementById("emojiPicker");
  const messageInput = document.getElementById("messageInput");
  let emojiList = []; // Stores the list of available emoji paths and names

  // Toggle emoji picker visibility
  emojiToggleBtn.addEventListener("click", () => {
    emojiPicker.style.display =
      emojiPicker.style.display === "none" ? "flex" : "none";
  });

  // Fetch and populate emojis into the picker
  try {
    const response = await fetch("/api/emojis");
    emojiList = await response.json();
    emojiList.forEach((file) => {
      const name = file.split("/").pop().split(".")[0]; // Extract emoji name from file path
      const button = document.createElement("button");
      button.className = "emoji-button";
      button.title = `:${name}:`; // Tooltip
      button.innerHTML = `<img src="${file}" alt=":${name}:">`; // Emoji image
      button.addEventListener("click", () => {
        messageInput.value += ` :${name}: `; // Insert emoji shortcode into input
        emojiPicker.style.display = "none"; // Hide picker after selection
        messageInput.focus(); // Keep focus on input
      });
      emojiPicker.appendChild(button);
    });
  } catch (e) {
    console.error("Failed to load emojis:", e);
  }

  // --- Suggestion Boxes (for @mentions and :emojis:) ---
  const suggestionBox = document.createElement("div");
  suggestionBox.id = "suggestionBox";
  // Apply all necessary styles directly here for self-containment
  Object.assign(suggestionBox.style, {
    position: "absolute", // Position it relative to its parent (#messageInputContainer)
    background: "var(--picker-background)", // Default background, adjust as needed to match your theme
    border: "1px solid ", // Subtle border
    zIndex: "1000", // Ensure it's above other content
    top: "-150px", // Adjust based on your layout to place it above the input
    left: "0", // Align with the left edge of the input
    width: "100%", // Match the width of the input container
    display: "none", // Hidden by default
    maxHeight: "150px", // Max height before scrolling
    maxWidth: "220px",
    overflowY: "auto", // Enable vertical scrolling
    color: "inherit", // Text color
    padding: "5px", // Inner padding
    borderRadius: "4px", // Rounded corners
    fontFamily: "monospace", // Font style
    boxSizing: "border-box", // Include padding and border in the element's total width and height
    boxShadow: "0 2px 5px rgba(0,0,0,0.2)", // Subtle shadow for depth
  });
  // Append the suggestion box to the message input's container
  document.getElementById("messageInputContainer").appendChild(suggestionBox);

  let currentSuggestions = []; // Stores the currently filtered suggestions
  let currentMode = null; // 'mention' or 'emoji'

  messageInput.addEventListener("input", () => {
    const cursorPos = messageInput.selectionStart;
    const text = messageInput.value.slice(0, cursorPos); // Text before cursor

    // Check for potential emoji shortcode (e.g., ":smile")
    let emojiMatch = text.match(/:([a-zA-Z0-9_]{1,20})$/);
    if (emojiMatch) {
      const term = emojiMatch[1].toLowerCase(); // The term after ':'
      currentSuggestions = emojiList
        .filter((path) => path.toLowerCase().includes(term)) // Filter emojis by name
        .map((path) => {
          const name = path.split("/").pop().split(".")[0];
          return { name, path };
        });
      currentMode = "emoji";
      renderSuggestions(currentSuggestions, currentMode);
      return; // Stop here if emoji match found
    }

    // Check for potential mention (e.g., "@user")
    let mentionMatch = text.match(/@(\w{1,20})$/);
    if (mentionMatch) {
      const term = mentionMatch[1].toLowerCase(); // The term after '@'
      currentSuggestions = usernames
        .filter((name) => name.toLowerCase().startsWith(term)) // Filter usernames
        .map((name) => ({ name })); // Format for consistency
      currentMode = "mention";
      renderSuggestions(currentSuggestions, currentMode);
      return; // Stop here if mention match found
    }

    // If no match, hide the suggestion box
    suggestionBox.style.display = "none";
    currentSuggestions = [];
    currentMode = null;
  });

  /**
   * Renders the filtered suggestions in the suggestion box.
   * @param {Array<Object>} suggestions - List of suggestion objects.
   * @param {string} mode - 'emoji' or 'mention'.
   */
  function renderSuggestions(suggestions, mode) {
    if (suggestions.length === 0) {
      suggestionBox.style.display = "none";
      return;
    }

    suggestionBox.innerHTML = suggestions
      .map((s) => {
        if (mode === "emoji") {
          return `<div class="emoji-suggestion" data-name="${s.name}" 
                      style="cursor:pointer;padding:6px 8px;border-bottom:1px solid rgba(0,0,0,0.1);">
                      <img src="${s.path}" class="emoji" style="vertical-align:middle;height:20px;width:20px;margin-right:5px;object-fit:contain;"> :${s.name}:
                  </div>`;
        } else {
          return `<div class="mention-suggestion" data-name="${s.name}" 
                      style="cursor:pointer;padding:6px 8px;border-bottom:1px solid rgba(0,0,0,0.1);">
                      @${s.name}
                  </div>`;
        }
      })
      .join("");

    // Add a hover effect directly here for the dynamically created divs
    suggestionBox
      .querySelectorAll(".emoji-suggestion, .mention-suggestion")
      .forEach((item) => {
        item.addEventListener("mouseenter", () => {
          item.style.background = ""; // Light grey hover background
        });
        item.addEventListener("mouseleave", () => {
          item.style.background = ""; // Remove background on mouse leave
        });
      });

    suggestionBox.style.display = "block";
  }

  // Handle click on a suggestion item
  suggestionBox.addEventListener("click", (e) => {
    const div = e.target.closest("div[data-name]");
    if (!div) return; // Not a suggestion item

    const name = div.dataset.name;
    const beforeCursor = messageInput.value.slice(
      0,
      messageInput.selectionStart
    );
    const afterCursor = messageInput.value.slice(messageInput.selectionStart);

    // Replace the partial match with the full suggestion
    if (currentMode === "mention") {
      messageInput.value =
        beforeCursor.replace(/@(\w{1,20})$/, `@${name} `) + afterCursor;
    } else if (currentMode === "emoji") {
      messageInput.value =
        beforeCursor.replace(/:([a-zA-Z0-9_]{1,20})$/, `:${name}: `) +
        afterCursor;
    }

    suggestionBox.style.display = "none"; // Hide after selection
    messageInput.focus(); // Keep focus on input
    currentSuggestions = []; // Clear suggestions
    currentMode = null;
  });

  // Handle keyboard navigation (Tab, Space, Escape) for suggestions
  messageInput.addEventListener("keydown", (e) => {
    // Auto-complete with first suggestion on Tab or Space
    if (
      (e.key === "Tab" || e.key === " ") &&
      currentSuggestions.length > 0 &&
      currentMode
    ) {
      e.preventDefault(); // Prevent default tab/space behavior (e.g., losing focus)
      const name = currentSuggestions[0].name; // Get the first suggestion
      const beforeCursor = messageInput.value.slice(
        0,
        messageInput.selectionStart
      );
      const afterCursor = messageInput.value.slice(messageInput.selectionStart);

      if (currentMode === "mention") {
        messageInput.value =
          beforeCursor.replace(/@(\w{1,20})$/, `@${name} `) + afterCursor;
      } else if (currentMode === "emoji") {
        messageInput.value =
          beforeCursor.replace(/:([a-zA-Z0-9_]{1,20})$/, `:${name}: `) +
          afterCursor;
      }

      suggestionBox.style.display = "none"; // Hide after auto-complete
      messageInput.focus();
      currentSuggestions = [];
      currentMode = null;
    }
    // Hide suggestion box on Escape
    else if (e.key === "Escape") {
      suggestionBox.style.display = "none";
      currentSuggestions = [];
      currentMode = null;
    }
  });
});

===== static/js/ui-utils.js =====
import { replaceEmojiShortcodes } from "./emoji-utils.js";

const userColors = {};

function getUserColor(name) {
  if (userColors[name]) return userColors[name];
  const hue = [...name].reduce((a, c) => a + c.charCodeAt(0), 0) % 360;
  const color = `hsl(${hue}, 80%, 60%)`;
  const glow = `hsl(${(hue + 180) % 360}, 100%, 60%)`;
  userColors[name] = { color, glow };
  return userColors[name];
}

export function renderMessage(li, sender, type, timestamp, binary) {
  const time = timestamp
    ? new Intl.DateTimeFormat("en-GB", {
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
        timeZone: "UTC",
        hour12: false,
      }).format(new Date(timestamp)) + " UTC"
    : "";

  const { color, glow } = getUserColor(sender);
  const blob = new Blob([binary]);
  const url = URL.createObjectURL(blob);
  let bodyHtml;

  if (type === "image") {
    bodyHtml = `<img src="${url}" style="max-width:200px; display:block;">`;
  } else if (type === "video") {
    bodyHtml = `<video controls style="max-width:300px; display:block;"><source src="${url}"></video>`;
  } else {
    const rawText = new TextDecoder().decode(binary);
    const processed = replaceEmojiShortcodes(rawText);
    bodyHtml = `<span style="color: var(--text); text-shadow: 0 0 3px ${glow};">${processed}</span>`;
  }

  // The only change is adding class="message-sender" to the span below
  li.innerHTML = `
        <span style="color:#aaa; margin-right:8px;">[${time}]</span>
        <span class="message-sender" style="color:${color}; text-shadow: 0 0 4px ${glow}; font-weight:bold; margin-right:6px;">${sender}</span>
        ${bodyHtml}
    `;
}

export function scrollToBottom() {
  const messageArea = document.getElementById("messageArea");
  messageArea.scrollTo({ top: messageArea.scrollHeight, behavior: "smooth" });
}

===== static/js/clock.js =====
const segmentMap = {
  0: ['a','b','c','d','e','f'],
  1: ['b','c'],
  2: ['a','b','g','e','d'],
  3: ['a','b','c','d','g'],
  4: ['f','g','b','c'],
  5: ['a','f','g','c','d'],
  6: ['a','f','e','d','c','g'],
  7: ['a','b','c'],
  8: ['a','b','c','d','e','f','g'],
  9: ['a','b','c','d','f','g']
};

function createDigit(num) {
  const digit = document.createElement('div');
  digit.className = 'digit';
  ['a','b','c','d','e','f','g'].forEach(seg => {
    const s = document.createElement('div');
    s.className = 'segment seg-' + seg;
    if (segmentMap[num]?.includes(seg)) s.classList.add('on');
    digit.appendChild(s);
  });
  return digit;
}

function createColon() {
  const colon = document.createElement('div');
  colon.className = 'colon';
  colon.innerHTML = '<div>.</div><div>.</div>';
  return colon;
}

function updateClock() {
  const now = new Date();

  const timeString = now.getUTCHours().toString().padStart(2, '0') + ':' +
                     now.getUTCMinutes().toString().padStart(2, '0') + ':' +
                     now.getUTCSeconds().toString().padStart(2, '0');

  const container = document.getElementById('digital-clock');
  if (container) {
    container.innerHTML = '';
    for (const char of timeString) {
      if (char === ':') {
        container.appendChild(createColon());
      } else {
        container.appendChild(createDigit(parseInt(char)));
      }
    }
  }

  const utcDateStr = now.toUTCString().split(' ').slice(0, 4).join(' ');
  const dateContainer = document.getElementById('utc-date');
  if (dateContainer) {
    dateContainer.textContent = utcDateStr;
  }
}

// Initialize after DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  updateClock();
  setInterval(updateClock, 1000);
});

===== static/js/session-checker.js =====
let sessionCheckInterval = null;

function checkSession() {
  fetch("/api/session-status", {
    method: "GET",
    credentials: "include",
    headers: {
      "Accept": "application/json",
    },
  })
    .then((res) => {
      if (!res.ok) throw new Error("Invalid session");
      return res.json();
    })
    .then((data) => {
      if (!data.isValid) {
        console.warn("Session invalidated. Redirecting to /login...");
        clearInterval(sessionCheckInterval);
        window.location.href = "/login";
      }
    })
    .catch(() => {
      console.warn("Session expired or error checking session.");
      clearInterval(sessionCheckInterval);
      window.location.href = "/login";
    });
}

document.addEventListener("DOMContentLoaded", () => {
  sessionCheckInterval = setInterval(checkSession, 5000); // every 5 seconds
});

===== static/js/socket-handler.js =====
import { decryptMessage, getSharedKey } from "./crypto-utils.js";
import { renderMessage, scrollToBottom } from "./ui-utils.js";
import { handleChunkInit } from "./file-handler.js";

let stompClient;
let messageArea = document.getElementById("messageArea");

export async function connectAndSubscribe(username) {
  const key = await getSharedKey();
  const socket = new SockJS("/chat-websocket");
  stompClient = Stomp.over(socket);

  stompClient.connect({}, () => {
    stompClient.subscribe("/topic/public", async (messageOutput) => {
      const msg = JSON.parse(messageOutput.body);

      // Check for duplicate (based on sender + timestamp)
      const alreadyExists = [
        ...document.querySelectorAll("#messageArea li"),
      ].some(
        (li) =>
          li.dataset.sender === msg.sender &&
          li.dataset.timestamp === msg.timestamp
      );

      if (alreadyExists) return;

      if (msg.fileId) {
        handleChunkInit(msg, key);
      } else {
        const li = document.createElement("li");
        li.dataset.sender = msg.sender;
        li.dataset.iv = msg.iv;
        li.dataset.content = msg.content;
        li.dataset.timestamp = msg.timestamp;

        try {
          const decryptedBytes = await decryptMessage(key, msg.iv, msg.content);
          const decryptedText = new TextDecoder().decode(decryptedBytes); // Decode for mention check

          renderMessage(
            li,
            msg.sender ?? "unknown",
            (msg.type || "text").toLowerCase(),
            msg.timestamp,
            decryptedBytes // Pass original bytes to renderMessage
          );

          // IMPORTANT: Check for mentions for *new* messages only
          // Ensure window.checkForMentions exists before calling
          if (typeof window.checkForMentions === "function") {
            window.checkForMentions(
              msg.sender,
              decryptedText, // Pass the decoded text to checkForMentions
              window.chatConfig.username
            );
          }
        } catch {
          renderMessage(
            li,
            msg.sender,
            "text",
            msg.timestamp,
            new TextEncoder().encode("[decryption failed]")
          );
        }

        messageArea.appendChild(li);
        scrollToBottom();
      }
    });
  });
}

export function getStompClient() {
  return stompClient;
}

===== static/js/file-handler.js =====
import { getSharedKey, encryptBytes, decryptMessage } from './crypto-utils.js';
import { renderMessage, scrollToBottom } from './ui-utils.js';
import { getStompClient } from './socket-handler.js';

const chunkBuffers = new Map();

export function setupFormSubmission(username) {
    document.getElementById('chatForm').addEventListener('submit', async function (e) {
        e.preventDefault();
        const input = document.getElementById('messageInput');
        const message = input.value.trim();
        if (!message) return;

        const key = await getSharedKey();
        const encrypted = await encryptBytes(key, new TextEncoder().encode(message));

        getStompClient().send("/app/chat.sendMessage", {}, JSON.stringify({
            sender: username,
            iv: encrypted.iv,
            content: encrypted.content,
            type: "text",
            timestamp: new Date().toISOString()
        }));
        input.value = '';
    });
}

export function setupFileUpload(username) {
    const input = document.getElementById('fileInput');
    input.addEventListener('change', async function () {
        const file = this.files[0];
        if (file) {
            sendLargeFileInChunks(file, username, file.type.startsWith("image/") ? "image" : "video");
            this.value = '';
        }
    });
}

export function setupClipboard(username) {
    document.addEventListener('paste', async function (event) {
        const items = event.clipboardData?.items;
        for (const item of items) {
            if (item.kind === 'file' && item.type.startsWith('image/')) {
                const file = item.getAsFile();
                sendLargeFileInChunks(file, username, 'image');
                break;
            }
        }
    });
}

export async function sendLargeFileInChunks(file, username, type) {
    const key = await getSharedKey();
    const chunkSize = 256 * 1024;
    const fileId = crypto.randomUUID();
    const totalChunks = Math.ceil(file.size / chunkSize);

    for (let i = 0; i < totalChunks; i++) {
        const chunk = file.slice(i * chunkSize, (i + 1) * chunkSize);
        const buffer = await chunk.arrayBuffer();
        const encrypted = await encryptBytes(key, buffer);

        getStompClient().send("/app/chat.sendChunk", {}, JSON.stringify({
            sender: username,
            fileId,
            chunkIndex: i,
            totalChunks,
            iv: encrypted.iv,
            content: encrypted.content,
            type
        }));
    }
}

export async function handleChunkInit(msg, key) {
    const { fileId, chunkIndex, totalChunks, iv, content, type, sender, timestamp } = msg;
    if (!chunkBuffers.has(fileId)) {
        chunkBuffers.set(fileId, { chunks: [], received: 0, total: totalChunks, type, sender, timestamp });
    }

    const entry = chunkBuffers.get(fileId);
    entry.chunks[chunkIndex] = { iv, content };
    entry.received++;

    if (entry.received === totalChunks) {
        const decryptedChunks = [];
        for (let i = 0; i < totalChunks; i++) {
            const part = entry.chunks[i];
            const data = await decryptMessage(key, part.iv, part.content);
            decryptedChunks.push(data);
        }

        const full = new Uint8Array(decryptedChunks.reduce((sum, c) => sum + c.length, 0));
        let offset = 0;
        for (const chunk of decryptedChunks) {
            full.set(chunk, offset);
            offset += chunk.length;
        }

        const li = document.createElement("li");
        renderMessage(li, sender, type, timestamp, full);
        document.getElementById('messageArea').appendChild(li);
        scrollToBottom();
        chunkBuffers.delete(fileId);
    }
}

===== static/js/register.js =====
document.addEventListener("DOMContentLoaded", () => {
  const codeInput = document.querySelector('input[name="code"]');
  const passwordInput = document.querySelector('input[name="password"]');
  const autoRegisterCheckbox = document.getElementById('autoRegisterCheckbox');
  const form = document.querySelector('form');
  let autoSubmitTimer = null;
  let activeTooltip = null;

  const toggleStateKey = 'autoRegisterEnabled';
  autoRegisterCheckbox.checked = localStorage.getItem(toggleStateKey) === 'true';

  autoRegisterCheckbox.addEventListener('change', () => {
    localStorage.setItem(toggleStateKey, autoRegisterCheckbox.checked);

    if (autoRegisterCheckbox.checked) {
      showTooltip('Auto-registering in 2 seconds...');
      autoSubmitTimer = setTimeout(() => {
        if (autoRegisterCheckbox.checked) {
          form.submit();
        }
      }, 2000);
    } else {
      if (autoSubmitTimer) {
        clearTimeout(autoSubmitTimer);
        autoSubmitTimer = null;
        showTooltip('Auto-register cancelled.');
      }
    }
  });

  const generatePassword = (length = 20) => {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+';
    return Array.from({ length }, () => chars.charAt(Math.floor(Math.random() * chars.length))).join('');
  };

  const showTooltip = (message) => {
    if (activeTooltip) {
      activeTooltip.remove();
      activeTooltip = null;
    }

    const tooltip = document.createElement('div');
    tooltip.textContent = message;
    Object.assign(tooltip.style, {
      background: 'var(--accent)',
      color: 'black',
      position: 'fixed',
      top: '10px',
      right: '10px',
      padding: '8px 12px',
      borderRadius: '4px',
      zIndex: 1000,
      fontSize: '14px'
    });

    document.body.appendChild(tooltip);
    activeTooltip = tooltip;

    setTimeout(() => {
      tooltip.remove();
      if (activeTooltip === tooltip) {
        activeTooltip = null;
      }
    }, 3000);
  };

  codeInput.addEventListener('paste', () => {
    setTimeout(() => {
      if (!autoRegisterCheckbox.checked) return;
      const pasted = codeInput.value.trim();
      if (pasted.length === 11) {
        const newPassword = generatePassword(20);
        passwordInput.value = newPassword;
        navigator.clipboard.writeText(newPassword).catch(() => {});
        showTooltip('Auto-registering in 2 seconds...');
        autoSubmitTimer = setTimeout(() => {
          if (autoRegisterCheckbox.checked) {
            form.submit();
          }
        }, 2000);
      }
    }, 50);
  });
});

===== static/js/crypto-utils.js =====
export function encodeBase64(buffer) {
    const bytes = new Uint8Array(buffer);
    let binary = '';
    const chunkSize = 0x8000;
    for (let i = 0; i < bytes.length; i += chunkSize) {
        binary += String.fromCharCode(...bytes.subarray(i, i + chunkSize));
    }
    return btoa(binary);
}

export function decodeBase64(str) {
    return Uint8Array.from(atob(str), c => c.charCodeAt(0));
}

export async function getSharedKey() {
    const match = document.cookie.match(/(?:^| )chatKey=([^;]+)/);
    if (!match) throw new Error("Missing encryption key!");
    const raw = decodeBase64(match[1]);
    return crypto.subtle.importKey("raw", raw, "AES-GCM", true, ["encrypt", "decrypt"]);
}

export async function encryptBytes(key, bytes) {
    const iv = crypto.getRandomValues(new Uint8Array(12));
    const encrypted = await crypto.subtle.encrypt({ name: "AES-GCM", iv }, key, bytes);
    return { iv: encodeBase64(iv), content: encodeBase64(encrypted) };
}

export async function decryptMessage(key, ivBase64, contentBase64) {
    const iv = decodeBase64(ivBase64);
    const data = decodeBase64(contentBase64);
    const decrypted = await crypto.subtle.decrypt({ name: "AES-GCM", iv }, key, data);
    return new Uint8Array(decrypted);
}

===== static/js/shortcuts.js =====
// public/js/keyboard-shortcuts.js
// Quick localStorage fix - run immediately
(function () {
  if (!localStorage.getItem("messages")) {
    localStorage.setItem("messages", "1");
  }

  if (!localStorage.getItem("shadow")) {
    localStorage.setItem("shadow", "1");
  }
})();

(function () {
  const CSS_RULES = {
    layout: `footer, h2, hr, nav, #utc-clock, h2 + p { display: none !important; }`,
    shadow: `* { text-shadow: none !important; }`,
    messages: `.emoji-suggestion:hover{
  background-color: var(--border-color) !important;
}
#messageArea li {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  position: relative;
}
#messageArea li span:first-child {
  position: absolute;
  right: 0px !important;
  top: 0;
  opacity: 0;
  transition: opacity 0.2s;
  font-size: 0.7rem;
  color: var(--border-color) !important;
  padding-left: 6px;
}
#messageArea li:hover span:first-child {
  opacity: 1;
}
#messageArea .message-sender {
  font-weight: bold;
  font-size: 0.85rem;
  padding-right: 8px;
  position: relative;
  display: inline-block;
}
#messageArea li span:last-child {
  background: var(--dark-bg);
  color: var(--text) !important;
  padding: 0.5rem 0.75rem;
  border-radius: 1rem;
  font-size: 0.95rem;
  line-height: 1.4;
  text-shadow: none;
  max-width: 100%;
  display: inline-block;
  word-break: break-word;
  margin-top: 2px;
}
#messageArea li span{
  margin: auto 15px;
}
.message-sender{
  padding: 3px 10px !important;
}
#messageArea li span + span + span {
  background-color: var(--light-bg) !important;
}  
 .message-sender {
        font-size: 12px !important;
        /* color: var(--border-color) !important; */
        margin: 0px 20px !important;
        padding: 2px !important;
        font-weight: 500 !important;

    }
`,
  };

  const NAVIGATION_PATHS = [
    "/dashboard",
    "/chat",
    "/upload#open",
    "/p2p",
    "/drop",
  ];

  // Shortcut definitions for the popup
  const SHORTCUTS = [
    {
      key: "H",
      description: "Dashboard",
      action: () => navigateTo("/dashboard"),
    },
    { key: "C", description: "Chat", action: () => navigateTo("/chat") },
    {
      key: "U",
      description: "Upload",
      action: () => navigateTo("/upload#open"),
    },
    {
      key: "P",
      description: "P2P (Peer-to-Peer)",
      action: () => navigateTo("/p2p"),
    },
    { key: "D", description: "Drop", action: () => navigateTo("/drop") },
    {
      key: "R",
      description: "Register",
      action: () => navigateTo("/register"),
    },
    { key: "L", description: "Login", action: () => navigateTo("/login") },
    { key: "T", description: "Change Theme", action: () => nextTheme() },
    {
      key: "N",
      description: "Random Theme",
      action: () => generateAndApplyRandomTheme(),
    },
    {
      key: "F",
      description: "Toggle Layout Elements",
      action: () => toggleStyle("layout", CSS_RULES.layout),
    },
    {
      key: "G",
      description: "Toggle Text Shadows",
      action: () => toggleStyle("shadow", CSS_RULES.shadow),
    },
    {
      key: "B",
      description: "Toggle Message Styling",
      action: () => toggleStyle("messages", CSS_RULES.messages),
    },
    {
      key: "K",
      description: "Cycle Navigation",
      action: () => cycleNavigation(),
    },
  ];

  // Popular theme: "One Dark" (inspired by Atom's One Dark)
  const themes = [
    {
      name: "Night Owl",
      css: `:root {
        --main-bg: #011627 !important;
        --dark-bg: #000E1F !important;
        --light-bg: #0b253b !important;
        --text: #d6deeb !important;
        --accent: #82aaff !important;
        --heading: #ffffff !important;
        --opacity: 50% !important;
        --border-color: color-mix(in srgb, currentColor var(--opacity), transparent) !important;
        --radius: 10px !important;
        --table-border-width: 1px !important;
      }`,
    },
    {
      name: "One Dark",
      css: `:root {
        --main-bg: #282c34 !important;
        --dark-bg: #21252b !important;
        --light-bg: #353b45 !important;
        --text: #abb2bf !important;
        --accent: #61afef !important;
        --heading: #e06c75 !important;
        --opacity: 50% !important;
        --border-color: color-mix(in srgb, currentColor var(--opacity), transparent) !important;
        --radius: 10px !important;
        --table-border-width: 1px !important;
      }`,
    },
    {
      name: "Minimalist Grayscale",
      css: `:root {
        --main-bg: #2c2c2c !important;
        --dark-bg: #1a1a1a !important;
        --light-bg: #3a3a3a !important;
        --text: #f0f0f0 !important;
        --accent: #88ddff !important;
        --heading: #ffffff !important;
        --opacity: 50% !important;
        --border-color: color-mix(in srgb, currentColor var(--opacity), transparent) !important;
        --radius: 10px !important;
        --table-border-width: 1px !important;
      }`,
    },
    {
      name: "Warm Earth Tones",
      css: `:root {
        --main-bg: #262626 !important;
        --dark-bg: #1a1a1a !important;
        --light-bg: #333333 !important;
        --text: #e8e6e3 !important;
        --accent: #ff9933 !important;
        --heading: #ffffff !important;
        --opacity: 50% !important;
        --border-color: color-mix(in srgb, currentColor var(--opacity), transparent) !important;
        --radius: 10px !important;
        --table-border-width: 1px !important;
      }`,
    },
    {
      name: "Monokai",
      css: `:root {
        --main-bg: #272822 !important;
        --dark-bg: #1a1a1a !important;
        --light-bg: #3e3d32 !important;
        --text: #f8f8f2 !important;
        --accent: #ae81ff !important;
        --heading: #ffffff !important;
        --opacity: 50% !important;
        --border-color: color-mix(in srgb, currentColor var(--opacity), transparent) !important;
        --radius: 10px !important;
        --table-border-width: 1px !important;
      }`,
    },
    {
      name: "Ayu Dark",
      css: `:root {
        --main-bg: #0a0e14 !important;
        --dark-bg: #050810 !important;
        --light-bg: #1a1e2a !important;
        --text: #cbccc6 !important;
        --accent: #ffcc66 !important;
        --heading: #ffffff !important;
        --opacity: 50% !important;
        --border-color: color-mix(in srgb, currentColor var(--opacity), transparent) !important;
        --radius: 10px !important;
        --table-border-width: 1px !important;
      }`,
    },
    {
      name: "Material Dark Oceanic",
      css: `:root {
        --main-bg: #263238 !important;
        --dark-bg: #1a252a !important;
        --light-bg: #37474f !important;
        --text: #eeffff !important;
        --accent: #80cba3 !important;
        --heading: #ffffff !important;
        --opacity: 50% !important;
        --border-color: color-mix(in srgb, currentColor var(--opacity), transparent) !important;
        --radius: 10px !important;
        --table-border-width: 1px !important;
      }`,
    },
    {
      name: "Dracula",
      css: `:root {
        --main-bg: #282a36 !important;
        --dark-bg: #1a1c26 !important;
        --light-bg: #383a4c !important;
        --text: #f8f8f2 !important;
        --accent: #bd93f9 !important;
        --heading: #ffffff !important;
        --opacity: 50% !important;
        --border-color: color-mix(in srgb, currentColor var(--opacity), transparent) !important;
        --radius: 10px !important;
        --table-border-width: 1px !important;
      }`,
    },
    {
      name: "Atom Super Dark",
      css: `:root {
    --main-bg: #0b0e14 !important;
    --dark-bg: #05070d !important;
    --light-bg: #1a1c23 !important;
    --text: #abb2bf !important;
    --accent: #c678dd !important;
    --heading: #e5c07b !important;
    --opacity: 30% !important;
    --border-color: color-mix(in srgb, currentColor var(--opacity), transparent) !important;
    --radius: 6px !important;
    --table-border-width: 1px !important;
  }`,
    },
  ];

  let currentThemeIndex = 0; // Default to index 0 (Night Owl)
  let isShortcutPanelOpen = false;
  const DYNAMIC_THEME_STYLE_ID = "dynamic-theme-style";
  const SHORTCUT_PANEL_ID = "keyboard-shortcut-panel";
  let dynamicThemeStyleElement = null;

  function getRandomHue() {
    return Math.floor(Math.random() * 360);
  }

  function getDarkHSL(hue) {
    const s = Math.floor(Math.random() * 20) + 70;
    const l = Math.floor(Math.random() * 15) + 5;
    return `hsl(${hue}, ${s}%, ${l}%)`;
  }

  function getLightHSL(hue) {
    const s = Math.floor(Math.random() * 20) + 70;
    const l = Math.floor(Math.random() * 15) + 80;
    return `hsl(${hue}, ${s}%, ${l}%)`;
  }

  function getAccentHSL(hue) {
    const s = Math.floor(Math.random() * 10) + 90;
    const l = Math.floor(Math.random() * 20) + 40;
    return `hsl(${hue}, ${s}%, ${l}%)`;
  }

  function applyTheme(cssString, themeName) {
    const existingStyle = document.getElementById(DYNAMIC_THEME_STYLE_ID);
    if (existingStyle) {
      document.head.removeChild(existingStyle);
    }

    dynamicThemeStyleElement = document.createElement("style");
    dynamicThemeStyleElement.id = DYNAMIC_THEME_STYLE_ID;
    dynamicThemeStyleElement.textContent = cssString;
    document.head.appendChild(dynamicThemeStyleElement);

    console.log(`Applied theme: ${themeName}`);
  }

  function nextTheme() {
    currentThemeIndex = (currentThemeIndex + 1) % themes.length;
    const theme = themes[currentThemeIndex];
    applyTheme(theme.css, theme.name);
    localStorage.setItem("currentThemeIndex", currentThemeIndex);
  }

  function generateAndApplyRandomTheme() {
    const baseHue = getRandomHue();
    const newVariables = {
      "--main-bg": `${getDarkHSL(baseHue)} !important`,
      "--dark-bg": `${getDarkHSL(baseHue - 20)} !important`,
      "--light-bg": `${getDarkHSL(baseHue + 20)} !important`,
      "--text": `${getLightHSL(baseHue + 180)} !important`,
      "--accent": `${getAccentHSL(baseHue + 90)} !important`,
      "--heading": `${getLightHSL(baseHue + 200)} !important`,
      "--opacity": "50% !important",
      "--border-color":
        "color-mix(in srgb, currentColor var(--opacity), transparent) !important",
      "--radius": "10px !important",
      "--table-border-width": "1px !important",
    };

    let randomThemeCss = ":root {\n";
    for (const [key, value] of Object.entries(newVariables)) {
      randomThemeCss += `  ${key}: ${value};\n`;
    }
    randomThemeCss += "}\n";

    applyTheme(randomThemeCss, "Random Generated Theme");

    console.log("--- Generated Random Theme CSS ---");
    console.log(randomThemeCss);
    console.log("----------------------------------");
  }

  function applyRuleStyle(key, css) {
    const id = `${key}-hide-style`;
    let style = document.getElementById(id);
    if (!style) {
      style = document.createElement("style");
      style.id = id;
      document.head.appendChild(style);
    }
    style.textContent = css;
  }

  function removeRuleStyle(key) {
    const id = `${key}-hide-style`;
    document.getElementById(id)?.remove();
  }

  function toggleStyle(key, css) {
    const isEnabled = localStorage.getItem(key);

    if (!isEnabled) {
      applyRuleStyle(key, css);
      localStorage.setItem(key, "1");
    } else {
      removeRuleStyle(key);
      localStorage.removeItem(key);
    }
  }

  function navigateTo(url) {
    window.location.href = url;
  }

  function cycleNavigation() {
    const currentFullPath = window.location.pathname + window.location.hash;
    let currentIndex = NAVIGATION_PATHS.indexOf(currentFullPath);

    let nextIndex;
    if (currentIndex === -1) {
      nextIndex = 0;
    } else {
      nextIndex = (currentIndex + 1) % NAVIGATION_PATHS.length;
    }

    console.log(
      `Navigation: ${currentFullPath} (index: ${currentIndex}) -> ${NAVIGATION_PATHS[nextIndex]} (index: ${nextIndex})`
    );
    navigateTo(NAVIGATION_PATHS[nextIndex]);
  }

  function createShortcutPanel() {
    // Create the panel HTML
    const panel = document.createElement("div");
    panel.id = SHORTCUT_PANEL_ID;
    panel.innerHTML = `
      <div class="shortcut-overlay">
        <div class="shortcut-panel">
          <div class="shortcut-header">
            <h3>Keyboard Shortcuts</h3>
            <button class="shortcut-close" title="Close (Esc)">×</button>
          </div>
          <div class="shortcut-content">
            <div class="shortcut-section">
              <h4>Navigation</h4>
              <div class="shortcut-grid">
                ${SHORTCUTS.filter((s) =>
                  ["H", "C", "U", "P", "D", "R", "L", "K"].includes(s.key)
                )
                  .map(
                    (shortcut) => `
                    <div class="shortcut-item" data-key="${shortcut.key}">
                      <span class="shortcut-key">${shortcut.key}</span>
                      <span class="shortcut-desc">${shortcut.description}</span>
                    </div>
                  `
                  )
                  .join("")}
              </div>
            </div>
            <div class="shortcut-section">
              <h4>Themes & Toggles</h4>
              <div class="shortcut-grid">
                ${SHORTCUTS.filter((s) =>
                  ["T", "N", "F", "G", "B"].includes(s.key)
                )
                  .map(
                    (shortcut) => `
                    <div class="shortcut-item" data-key="${shortcut.key}">
                      <span class="shortcut-key">${shortcut.key}</span>
                      <span class="shortcut-desc">${shortcut.description}</span>
                    </div>
                  `
                  )
                  .join("")}
              </div>
            </div>
          </div>
          <div class="shortcut-footer">
            <p>Press any key above to execute, or <span class="key-hint">Esc</span> to close</p>
          </div>
        </div>
      </div>
    `;

    // Add styles
    const style = document.createElement("style");
    style.textContent = `
      #${SHORTCUT_PANEL_ID} {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 10000;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.2s ease, visibility 0.2s ease;
      }

      #${SHORTCUT_PANEL_ID}.active {
        opacity: 1;
        visibility: visible;
      }

      .shortcut-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        backdrop-filter: blur(5px);
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .shortcut-panel {
        background: var(--dark-bg, #0b121f);
        border: 1px solid var(--border-color, #333);
        border-radius: var(--radius, 10px);
        padding: 24px;
        max-width: 900px;
        width: 90%;
        max-height: 80vh;
        overflow-y: auto;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
        color: var(--text, #a4b1cd);
      }

      .shortcut-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 12px;
        border-bottom: 1px solid var(--border-color, #333);
      }

      .shortcut-header h3 {
        margin: 0;
        color: var(--heading, #cad2e2);
        font-size: 1.5rem;
      }

      .shortcut-close {
        max-width: 50px;
        background: none;
        border: none;
        color: var(--text, #a4b1cd);
        font-size: 24px;
        cursor: pointer;
        padding: 4px 8px;
        border-radius: 4px;
        transition: background-color 0.2s ease;
      }

      .shortcut-close:hover {
        background: var(--light-bg, #1a2332);
      }

      .shortcut-section {
        margin-bottom: 24px;
      }

      .shortcut-section h4 {
        margin: 0 0 12px 0;
        color: var(--accent, #9fef00);
        font-size: 1.1rem;
      }

      .shortcut-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 8px;
      }

      .shortcut-item {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 8px 12px;
        border-radius: var(--radius, 10px);
        background: var(--light-bg, #1a2332);
        border: 1px solid var(--border-color, #333);
        cursor: pointer;
        transition: all 0.2s ease;
      }

      .shortcut-item:hover {
        background: var(--main-bg, #141d2b);
        border-color: var(--accent, #9fef00);
        transform: translateY(-1px);
      }

      .shortcut-key {
        background: var(--accent, #9fef00);
        color: var(--dark-bg, #0b121f);
        padding: 4px 8px;
        border-radius: 4px;
        font-weight: bold;
        font-size: 0.9rem;
        min-width: 20px;
        text-align: center;
      }

      .shortcut-desc {
        color: var(--text, #a4b1cd);
        font-size: 0.9rem;
      }

      .shortcut-footer {
        margin-top: 20px;
        padding-top: 12px;
        border-top: 1px solid var(--border-color, #333);
        text-align: center;
        color: var(--text, #a4b1cd);
        font-size: 0.85rem;
      }

      .key-hint {
        background: var(--light-bg, #1a2332);
        padding: 2px 6px;
        border-radius: 3px;
        font-weight: bold;
      }
    `;
    document.head.appendChild(style);

    return panel;
  }

  function showShortcutPanel() {
    if (isShortcutPanelOpen) return;

    let panel = document.getElementById(SHORTCUT_PANEL_ID);
    if (!panel) {
      panel = createShortcutPanel();
      document.body.appendChild(panel);
    }

    isShortcutPanelOpen = true;
    panel.classList.add("active");

    // Add click handlers
    panel
      .querySelector(".shortcut-close")
      .addEventListener("click", hideShortcutPanel);
    panel.querySelector(".shortcut-overlay").addEventListener("click", (e) => {
      if (e.target === panel.querySelector(".shortcut-overlay")) {
        hideShortcutPanel();
      }
    });

    // Add click handlers for shortcut items
    panel.querySelectorAll(".shortcut-item").forEach((item) => {
      item.addEventListener("click", () => {
        const key = item.dataset.key;
        executeShortcut(key);
      });
    });
  }

  function hideShortcutPanel() {
    if (!isShortcutPanelOpen) return;

    const panel = document.getElementById(SHORTCUT_PANEL_ID);
    if (panel) {
      panel.classList.remove("active");
    }

    isShortcutPanelOpen = false;
  }

  function executeShortcut(key) {
    const shortcut = SHORTCUTS.find((s) => s.key === key);
    if (shortcut) {
      hideShortcutPanel();
      shortcut.action();
    }
  }

  // Initialize on DOM ready
  window.addEventListener("DOMContentLoaded", () => {
    // Apply existing styles from localStorage
    for (const key in CSS_RULES) {
      if (localStorage.getItem(key)) {
        applyRuleStyle(key, CSS_RULES[key]);
      }
    }

    // Load and apply the saved theme or default to index 1
    const savedThemeIndex = localStorage.getItem("currentThemeIndex");
    if (
      savedThemeIndex !== null &&
      !isNaN(savedThemeIndex) &&
      savedThemeIndex >= 0 &&
      savedThemeIndex < themes.length
    ) {
      currentThemeIndex = parseInt(savedThemeIndex, 10);
    } else {
      currentThemeIndex = 0; 
      localStorage.setItem("currentThemeIndex", currentThemeIndex);
    }
    const initialTheme = themes[currentThemeIndex];
    applyTheme(initialTheme.css, initialTheme.name);
  });

  // Main event listener
  document.addEventListener("keydown", (e) => {
    // Handle Ctrl+/ to show shortcut panel
    if (e.ctrlKey && e.key === "/") {
      e.preventDefault();
      showShortcutPanel();
      return;
    }

    // Handle shortcuts when panel is open
    if (isShortcutPanelOpen) {
      if (e.key === "Escape") {
        e.preventDefault();
        hideShortcutPanel();
        return;
      }

      // Execute shortcut by key
      const key = e.key.toUpperCase();
      if (SHORTCUTS.some((s) => s.key === key)) {
        e.preventDefault();
        executeShortcut(key);
        return;
      }
    }

    // Original Ctrl+Alt shortcuts (kept for backwards compatibility)
    if (e.ctrlKey && e.altKey) {
      e.preventDefault();

      switch (e.code) {
        case "KeyF":
          toggleStyle("layout", CSS_RULES.layout);
          break;
        case "KeyG":
          toggleStyle("shadow", CSS_RULES.shadow);
          break;
        case "KeyH":
          navigateTo("/dashboard");
          break;
        case "KeyU":
          navigateTo("/upload#open");
          break;
        case "KeyP":
          navigateTo("/p2p");
          break;
        case "KeyD":
          navigateTo("/drop");
          break;
        case "KeyC":
          navigateTo("/chat");
          break;
        case "KeyR":
          navigateTo("/register");
          break;
        case "KeyL":
          navigateTo("/login");
          break;
        case "KeyT":
          nextTheme();
          break;
        case "KeyN":
          generateAndApplyRandomTheme();
          break;
        case "KeyK":
          cycleNavigation();
          break;
      }
    }
  });
})();

===== templates/register.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">

<head>
  <th:block th:replace="~{fragments/header :: head}"></th:block>
  <link rel="stylesheet" th:href="@{/css/register.css}" />
  <script defer th:src="@{/js/register.js}"></script>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
</head>

<body>
  <div th:replace="~{fragments/header :: header}"></div>

  <main id="container">
    <main id="register">
      <h2>Register</h2>
      <form th:action="@{/register}" method="post" autocomplete="off">
        <div>
          <label>Registration Code:</label>
          <br>
          <input type="text" name="code" required autocomplete="off">
        </div>
        <div>
          <label>Choose Password:</label>
          <br>
          <input type="password" name="password" required autocomplete="off">
        </div>

        <div class="tooltip-box">
          Toggle "Auto-Register": accepts either autofilled password or generate new one - then automatically register after 2 seconds.
        </div>

        <div class="checkbox-row">
          <label>
            <input type="checkbox" id="autoRegisterCheckbox" />
            Enable Auto-Register
          </label>
        </div>

        <div class="btn-row">
          <button type="submit">Register</button>
        </div>

        <div th:if="${error}">
          <p th:text="${error}"></p>
        </div>
      </form>
    </main>
  </main>

  <div th:replace="~{fragments/footer :: footer}"></div>
</body>

</html>

===== templates/p2p.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>P2P Secure File Share</title>

    <link rel="stylesheet" th:href="@{/css/style.css}">
    <script src="/js/theme-switcher.js"></script>
    <script src="/js/shortcuts.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sockjs-client/dist/sockjs.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/stompjs/lib/stomp.min.js"></script>

    <style>
        :root {
            --main-bg: #011627;
            --dark-bg: #000e1f;
            --light-bg: #0b253b;
            --text: #d6deeb;
            --accent: #82aaff;
            --heading: #ffffff;
            --opacity: 50%;
            --border-color: color-mix(in srgb, currentColor var(--opacity), transparent);
            --radius: 10px;
            --table-border-width: 1px;
        }

        body {
            background-color: var(--main-bg);
            color: var(--text);
            font-family: sans-serif;
            margin: 0;
            padding: 0;
        }

        main {
            max-width: 800px;
            margin: 40px auto;
            padding: 20px;
            background-color: var(--light-bg);
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
        }

        h2 {
            color: var(--heading);
            /* border-bottom: 1px solid var(--border-color); */
            padding-bottom: 10px;
            margin-bottom: 20px;
        }

        p {
            margin: 10px 0;
        }

        code {
            background-color: var(--dark-bg);
            padding: 10px;
            border-radius: 5px;
            display: block;
            width: 100%;
            box-sizing: border-box;
            color: var(--accent);
            font-family: monospace;
            word-break: break-word;
            margin-top: 5px;
        }

        input[type="text"],
        input[type="file"] {
            background-color: var(--dark-bg);
            color: var(--text);
            border: 1px solid var(--border-color);
            border-radius: 5px;
            padding: 8px;
            box-sizing: border-box;
            width: 100%;
            max-width: 500px;
        }

        #keyInputSection {
            margin-top: 20px;
        }

        button {
            padding: 8px 16px;
            border-radius: 5px;
            border: none;
            background-color: var(--accent);
            color: var(--main-bg);
            font-weight: bold;
            cursor: pointer;
            margin-left: 10px;
            white-space: nowrap;
        }

        button:hover {
            background-color: #a6c1ff;
        }

        .file-send-row {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            align-items: center;
            margin-top: 15px;
        }

        progress {
            margin-top: 15px;
            height: 16px;
            border-radius: 5px;
            background-color: var(--dark-bg);
            width: 100%;
            max-width: 300px;
        }

        progress::-webkit-progress-bar {
            background-color: var(--dark-bg);
            border-radius: 5px;
        }

        progress::-webkit-progress-value {
            background-color: var(--accent);
            border-radius: 5px;
        }

        label {
            font-weight: bold;
            display: block;
            margin-top: 20px;
            color: var(--heading);
        }
    </style>
</head>

<body>
    <div th:replace="~{fragments/header :: header}"></div>

    <main>
        <h2>Secure P2P File Sharing</h2>
        <p>Share this session link with your peer:</p>
        <code th:text="${sessionUrl}"></code>

        <p><strong>Secret Key (Share manually!):</strong>
            <code id="secretDisplay"></code>
        </p>

        <div id="keyInputSection">
            <label for="keyInput"><strong>Paste Secret Key (if received):</strong></label>
            <input type="text" id="keyInput" placeholder="Base64 key...">
            <button onclick="saveKey()">Save Key</button>
        </div>

        <div class="file-send-row">
            <input type="file" id="fileInput" />
            <button onclick="sendFile()">Send Encrypted File</button>
        </div>

        <progress id="progressBar" value="0" max="100" style="display:none;"></progress>
    </main>

    <script th:inline="javascript">
        const sessionId = /*[[${sessionId}]]*/ 'unknown';
        const username = /*[[${session.user}]]*/ 'unknown';

        const socket = new SockJS('/p2p-ws');
        const client = Stomp.over(socket);
        const keyStorageKey = `p2p-key-${sessionId}`;
        let aesKey;

        function generateKey() {
            return crypto.subtle.generateKey({ name: "AES-GCM", length: 256 }, true, ["encrypt", "decrypt"]);
        }

        function exportKey(key) {
            return crypto.subtle.exportKey("raw", key).then(raw => btoa(String.fromCharCode(...new Uint8Array(raw))));
        }

        function importKey(base64) {
            const bytes = Uint8Array.from(atob(base64), c => c.charCodeAt(0));
            return crypto.subtle.importKey("raw", bytes, { name: "AES-GCM" }, true, ["encrypt", "decrypt"]);
        }

        async function initKey() {
            let stored = sessionStorage.getItem(keyStorageKey);
            if (stored) {
                aesKey = await importKey(stored);
                document.getElementById('secretDisplay').textContent = stored;
                document.getElementById('keyInputSection').style.display = "none";
            } else {
                aesKey = await generateKey();
                const exported = await exportKey(aesKey);
                sessionStorage.setItem(keyStorageKey, exported);
                document.getElementById('secretDisplay').textContent = exported;
            }
        }

        function saveKey() {
            const base64 = document.getElementById('keyInput').value.trim();
            if (!base64) return alert("Key is empty.");
            importKey(base64).then(key => {
                aesKey = key;
                sessionStorage.setItem(keyStorageKey, base64);
                document.getElementById('secretDisplay').textContent = base64;
                alert("Key saved! Reloading...");
                location.reload();
            }).catch(() => alert("Invalid key format"));
        }

        initKey();

        client.connect({}, () => {
            client.subscribe(`/topic/p2p/${sessionId}`, async message => {
                const payload = JSON.parse(message.body);
                if (payload.sender === username) return;

                const iv = Uint8Array.from(atob(payload.iv), c => c.charCodeAt(0));
                const data = Uint8Array.from(atob(payload.data), c => c.charCodeAt(0));

                try {
                    const decrypted = await crypto.subtle.decrypt(
                        { name: "AES-GCM", iv: iv },
                        aesKey,
                        data
                    );

                    const blob = new Blob([decrypted]);
                    const a = document.createElement("a");
                    a.href = URL.createObjectURL(blob);
                    a.download = payload.filename || "shared_file";
                    a.click();
                } catch (err) {
                    alert("Failed to decrypt. Ensure correct key.");
                }
            });
        });

        async function sendFile() {
            const file = document.getElementById('fileInput').files[0];
            const progressBar = document.getElementById('progressBar');

            if (!file) return alert("Select a file.");
            if (file.size > 50 * 1024 * 1024) return alert("Max file size is 50MB");

            const buffer = await file.arrayBuffer();
            const iv = crypto.getRandomValues(new Uint8Array(12));
            progressBar.style.display = 'block';
            progressBar.value = 10;

            const encrypted = await crypto.subtle.encrypt(
                { name: "AES-GCM", iv: iv },
                aesKey,
                buffer
            );

            progressBar.value = 70;

            const payload = {
                sender: username,
                filename: file.name,
                iv: btoa(String.fromCharCode(...iv)),
                data: btoa(String.fromCharCode(...new Uint8Array(encrypted)))
            };

            client.send(`/app/p2p/${sessionId}/file`, {}, JSON.stringify(payload));
            progressBar.value = 100;
        }
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('code').forEach(code => {
                code.style.cursor = 'copy';
                code.title = 'Click to copy';

                code.addEventListener('click', () => {
                    const originalText = code.textContent;
                    navigator.clipboard.writeText(originalText).then(() => {
                        code.textContent = 'Copied';
                        setTimeout(() => {
                            code.textContent = originalText;
                        }, 1500);
                    }).catch(err => {
                        console.error('Copy failed', err);
                    });
                });
            });
        });
    </script>

    <script type="module" src="/js/session-checker.js"></script>
</body>

</html>
===== templates/fragments/header.html =====
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head th:fragment="head">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <link rel="stylesheet" th:href="@{/css/style.css}" />
  <link rel="stylesheet" th:href="@{/css/header.css}" />
  <script src="/js/shortcuts.js"></script>
</head>

<body>
  <div th:fragment="header">
    <nav>
      <ul>
        <li th:if="${session.user != null}"><a th:href="@{/dashboard}">Dashboard</a></li>
        <li th:if="${session.user != null}"><a th:href="@{/chat}">Chat</a></li>
        <li th:if="${session.user != null}"><a th:href="@{/upload}">Upload</a></li>
        <li th:if="${session.user != null}"><a th:href="@{/p2p}">P2P</a></li>
        <li th:if="${session.user == null}"><a th:href="@{/login}">Login</a></li>
        <li th:if="${session.user == null}"><a th:href="@{/register}">Register</a></li>
        <li th:if="${session.user != null}">
          <a th:href="@{/logout}" class="logout-link"
             style="color: inherit; text-decoration: none;">Logout</a>
        </li>
      </ul>
    </nav>
  </div>
</body>
</html>

===== templates/fragments/footer.html =====
<footer th:fragment="footer">
  <link rel="stylesheet" th:href="@{/css/style.css}">
  <link rel="stylesheet" th:href="@{/css/footer.css}">
  <script src="/js/clock.js"></script>
  <p>&copy; 2025 WebApp</p>

  <style>
    footer {
      width: 100%;
      max-width: 700px;
      text-align: center;
      margin: 0 auto;
      background-color: var(--dark-bg);
      padding: 20px;
      border-top-right-radius: 25px;
      border-top-left-radius: 25px;
    }

  </style>
</footer>

===== templates/error_prod.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<meta name="viewport" content="width=device-width, initial-scale=1.0" />

<head>
    <link rel="stylesheet" th:href="@{/css/style.css}">
    <script src="/js/shortcuts.js"></script>
    <title>Error</title>
</head>

<body>
    <h2>Something went wrong</h2>
    <p>An unexpected error occurred. Please try again later.</p>

</body>

</html>
===== templates/confirm_drop.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<meta name="viewport" content="width=device-width, initial-scale=1.0" />

<head th:replace="~{fragments/header :: head}"></head>

<body>
    <link rel="stylesheet" th:href="@{/css/style.css}">

    <div th:replace="~{fragments/header :: header}"></div>

    <main>
        <style>
            main {
                max-width: 600px;
                margin: 60px auto;
                background-color: var(--light-bg);
                padding: 2rem;
                border-radius: var(--radius);
                display: flex;
                flex-direction: column;
                gap: 1.5rem;
            }

            h2 {
                color: var(--heading);
                margin-bottom: 1rem;
            }

            main ul {
                background-color: var(--dark-bg);
                padding: 1rem 1.5rem;
                border-radius: var(--radius);
                border: 1px solid var(--border-color);
            }

            li {
                margin-bottom: 0.5rem;
            }

            p {
                margin: 0.5rem 0;
            }

            form {
                display: flex;
                justify-content: center;
            }

            button {
                background-color: var(--accent);
                color: var(--dark-bg);
                padding: 0.75rem 1.25rem;
                border: none;
                border-radius: var(--radius);
                font-weight: bold;
                cursor: pointer;
            }

            button:hover {
                opacity: 0.9;
            }
        </style>
        <h2>Danger Zone: DROP ALL DATA</h2>
        <p>This will:</p>
        <ul>
            <li>Delete all uploaded files</li>
            <li>Log out all users</li>
            <li>Delete all registration codes</li>
            <li>Delete all user accounts</li>
        </ul>
        <p><strong>This action is irreversible.</strong></p>
        <form th:action="@{/drop}" method="post">
            <button type="submit">Confirm & Drop Everything</button>
        </form>
    </main>

    <div th:replace="~{fragments/footer :: footer}"></div>
</body>

</html>
===== templates/dashboard.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<meta name="viewport" content="width=device-width, initial-scale=1.0" />

<head th:replace="~{fragments/header :: head}"></head>

<body>
    <link rel="stylesheet" th:href="@{/css/style.css}">

    <div th:replace="~{fragments/header :: header}"></div>

    <section class="dashbaord">
        <h2>Welcome to the Dashboard!</h2>
        <p th:text="'Logged in as: ' + ${session.user}"></p>
        <h3>Change Username</h3>
        <form th:action="@{/change-username}" method="post" autocomplete="off">
            <input type="text" name="newUsername" placeholder="New Username" required autocomplete="off">
            <button type="submit">Change Username</button>
        </form>
        <div th:if="${error}" class="error">
            <p th:text="${error}"></p>
        </div>
        <h3>All Users Status</h3>
        <table border="1">
            <tr>
                <th>Username</th>
                <th>Status</th>
                <th>Last Online (UTC)</th>
            </tr>
            <tr th:each="user : ${users}">
                <td th:text="${user.username}"></td>
                <td th:text="${user.status}"></td>
                <td th:text="${#dates.format(user.lastOnlineUtc, 'yyyy-MM-dd HH:mm:ss')}"></td>
            </tr>
        </table>
        <h3>Registration Codes Left</h3>
        <p th:text="${codesLeft} + ' unused code(s)'"></p>
        <h3>User Activity Log</h3>
        <ul>
            <li th:each="entry : ${activityLog}" th:text="${entry}"></li>
        </ul>
        <!-- <form th:action="@{/logout}" method="get">
            <button type="submit">Logout</button>
        </form> -->
        <section class="keyboard-shortcuts">
            <h2>Shortcuts</h2>
            <p>You can use these quick key combinations to navigate and control parts of the website without clicking!
            </p>
            <ul>
                <li>Press <kbd>Ctrl + Alt + F</kbd> to <strong>hide or show</strong> some parts of the page, like the
                    footer, main headings, and navigation bar.</li>
                <li>Press <kbd>Ctrl + Alt + G</kbd> to <strong>toggle glowing effects</strong> (this turns text shadows
                    on
                    or off).</li>
                <li>Press <kbd>Ctrl + Alt + Tab</kbd> to <strong>cycle forward</strong> through important pages:
                    Dashboard,
                    Upload, P2P, Drop, and Chat.</li>
                <li>Press <kbd>Ctrl + Alt + Shift + Tab</kbd> to <strong>cycle backward</strong> through those same
                    pages.
                </li>
                <li>Press <kbd>Ctrl + Alt + H</kbd> to quickly go to the <strong>Dashboard</strong>.</li>
                <li>Press <kbd>Ctrl + Alt + U</kbd> to quickly go to the <strong>Upload</strong> page.</li>
                <li>Press <kbd>Ctrl + Alt + P</kbd> to quickly go to the <strong>P2P</strong> (Peer-to-Peer) page.</li>
                <li>Press <kbd>Ctrl + Alt + D</kbd> to quickly go to the <strong>Drop</strong> page.</li>
                <li>Press <kbd>Ctrl + Alt + C</kbd> to quickly go to the <strong>Chat</strong> page.</li>
                <li>Press <kbd>Ctrl + Alt + R</kbd> to quickly go to the <strong>Register</strong> page.</li>
                <li>Press <kbd>Ctrl + Alt + L</kbd> to quickly go to the <strong>Login</strong> page.</li>
                <li>Press <kbd>Ctrl + Alt + T</kbd> to <strong>change the website's theme</strong> to a random new look.
                </li>
                <li>Press <kbd>Ctrl + Alt + N</kbd> to see a <strong>randomly generated new item</strong> (this
                    currently
                    just shows an alert with a random code).</li>
            </ul>

        </section>
    </section>



    <div th:replace="~{fragments/footer :: footer}"></div>
</body>

</html>

<script>document.addEventListener("DOMContentLoaded", () => {
        function copyToClipboard(text) {
            navigator.clipboard.writeText(text).catch(() => { });
        }

        function flashCopied(element, originalText) {
            element.textContent = 'Copied';
            setTimeout(() => {
                element.textContent = originalText;
            }, 2000);
        }

        document.querySelectorAll('table td:nth-child(1)').forEach(td => {
            td.addEventListener('click', () => {
                const username = td.textContent.trim();
                copyToClipboard(username);
                flashCopied(td, username);
            });
        });

        const formats = ['iso', 'day', 'localTime'];

        function setupTimeToggle(element, originalIsoText) {
            element.dataset.originalTime = originalIsoText;
            element.dataset.currentFormatIndex = '0';

            element.addEventListener('click', () => {
                const originalTime = element.dataset.originalTime;
                let currentFormatIndex = parseInt(element.dataset.currentFormatIndex, 10);
                currentFormatIndex = (currentFormatIndex + 1) % formats.length;

                let newText = originalTime;
                try {
                    const date = new Date(originalTime);
                    if (formats[currentFormatIndex] === 'day') {
                        newText = date.toISOString().slice(0, 10);
                    } else if (formats[currentFormatIndex] === 'localTime') {
                        newText = date.toLocaleString('en-US', {
                            hour: '2-digit',
                            minute: '2-digit',
                            second: '2-digit',
                            hour12: true
                        });
                    }
                } catch (e) {
                    console.error("Error parsing date for time toggle:", e);
                }

                element.textContent = newText;
                element.dataset.currentFormatIndex = currentFormatIndex.toString();
            });
        }

        document.querySelectorAll('table td:nth-child(3)').forEach(td => {
            setupTimeToggle(td, td.textContent.trim());
        });

        const logItems = document.querySelectorAll('section.dashbaord ul li');
        const isoRegex = /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z/g;
        const usernameRegex = /^([\w.-]+_[\w-]+)/;

        logItems.forEach(li => {
            let html = li.innerHTML;
            let timestampMatches = [...html.matchAll(isoRegex)];
            if (timestampMatches.length) {
                timestampMatches.reverse().forEach(m => {
                    const timestamp = m[0];
                    const wrapped = `<span>${timestamp}</span>`;
                    const start = m.index;
                    const end = start + timestamp.length;
                    html = html.slice(0, start) + wrapped + html.slice(end);
                });
            }

            const usernameMatch = html.match(usernameRegex);
            if (usernameMatch && usernameMatch[1]) {
                const username = usernameMatch[1];
                const wrappedUsername = `<span>${username}</span>`;
                html = html.replace(username, wrappedUsername);
            }

            li.innerHTML = html;

            li.querySelectorAll('span').forEach(span => {
                const text = span.textContent.trim();
                if (isoRegex.test(text)) {
                    setupTimeToggle(span, text);
                } else {
                    span.addEventListener('click', () => {
                        copyToClipboard(text);
                        flashCopied(span, text);
                    });
                }
            });
        });
    });
</script>


<style>
    * {
        box-sizing: border-box;
    }

    .dashbaord {
        margin: 20px auto;
        max-width: 900px;
        display: flex;
        flex-direction: column;
        gap: 25px;
    }

    .dashbaord input {
        background-color: var(--light-bg);
        border: none;
        color: var(--text);
        padding: 8px 15px;
        border-radius: 5px;
    }

    .dashbaord button {
        border-radius: 5px;
        background-color: var(--accent);
        border: none;
        padding: 8px 15px;
    }

    .dashbaord form {
        display: flex;
        gap: 10px;
    }

    .dashbaord form input {
        flex: 1;
    }

    code,
    kbd {
        padding: 2px 8px;
        margin: 2px;
        border: 1px solid var(--border-color);
        border-radius: 10px;
        background-color: var(--dark-bg) !important;
        ;
    }

    li {
        margin: 10px;
    }

    li::marker {
        color: var(--accent);
    }

    table {
        border-collapse: separate;
        border-spacing: 0;
        font-size: 16px;
        margin: 0 auto;
        width: 100%;
        border: 0px;
    }

    td {
        font-size: 14px;
    }

    td,
    th {
        padding: 5px 10px;
        border: none;
    }

    th {
        border-top: 1px solid var(--border-color);
        border-bottom: 1px solid var(--border-color);
    }

    th:first-child {
        border-top-left-radius: var(--radius);
    }

    th:last-child {
        border-top-right-radius: var(--radius);
    }

    /* Right borders for all cells except last column */
    td:not(:last-child),
    th:not(:last-child) {
        border-right: var(--table-border-width) solid var(--border-color);
    }

    /* Bottom borders for tbody rows (except last) and thead */
    tbody tr:not(:last-child) td,
    thead tr th {
        border-bottom: var(--table-border-width) solid var(--border-color);
    }

    /* Left borders for first column */
    tr td:first-child,
    tr th:first-child {
        border-left: var(--table-border-width) solid var(--border-color);
    }

    /* Right borders for last column */
    tr td:last-child,
    tr th:last-child {
        border-right: var(--table-border-width) solid var(--border-color);
    }

    /* Bottom border for last row */
    tbody tr:last-child td {
        border-bottom: var(--table-border-width) solid var(--border-color);
    }

    /* Top borders for header and first body row */
    thead tr th,
    tbody tr:first-child td {
        border-top: var(--table-border-width) solid var(--border-color);
    }

    /* Header background */
    thead tr th {
        background-color: var(--dark-bg);
    }

    /* Alternating row colors */
    tbody tr:nth-of-type(2n) td {
        background-color: var(--dark-bg);
    }

    /* Rounded corners - top left */
    thead tr th:first-child,
    tbody tr:first-child td:first-child {
        border-top-left-radius: var(--radius);
    }

    /* Rounded corners - top right */
    thead tr th:last-child,
    tbody tr:first-child td:last-child {
        border-top-right-radius: var(--radius);
    }

    /* Rounded corners - bottom left */
    tbody tr:last-child td:first-child {
        border-bottom-left-radius: var(--radius);
    }

    /* Rounded corners - bottom right */
    tbody tr:last-child td:last-child {
        border-bottom-right-radius: var(--radius);
    }

    .keyboard-shortcuts {
        padding: 20px;
        border: 2px solid;
        border-radius: 5px;
        background-color: var(--light-bg);

        & h2 {
            text-align: center;
        }
    }
</style>

<script type="module" src="/js/session-checker.js"></script>
===== templates/error_dev.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<meta name="viewport" content="width=device-width, initial-scale=1.0" />

<head>
    <link rel="stylesheet" th:href="@{/css/style.css}">
    <script src="/js/shortcuts.js"></script>
    <title>Error</title>
</head>

<body>
    <h2>Something went wrong</h2>
    <p>An unexpected error occurred. Please try again later.</p>

</body>

</html>

===== templates/upload.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<meta name="viewport" content="width=device-width, initial-scale=1.0" />

<head th:replace="~{fragments/header :: head}"></head>

<body>
    <div th:replace="~{fragments/header :: header}"></div>
    <link rel="stylesheet" th:href="@{/css/style.css}">

    <main id="upload">
        <h2>Upload a File</h2>

        <form id="uploadForm" method="post" enctype="multipart/form-data">
            <input type="file" name="file" id="fileInput" required>
            <button type="submit">Upload</button>
        </form>

        <div id="uploadStatus" style="display:none; margin-top: 15px;">
            <progress id="progressBar" value="0" max="100" style="width: 100%;"></progress>
            <p id="progressText" style="text-align: center;">0%</p>
        </div>

        <div id="resultMessage" style="display: none; margin-top: 20px;"></div>
    </main>

    <div th:replace="~{fragments/footer :: footer}"></div>

    <script>
        function copyCombined(button) {
            const url = document.getElementById('downloadUrl').href;
            const password = document.getElementById('passwordText').textContent;
            const formatted = `URL: ${url}\nPassword: ${password}`;
            navigator.clipboard.writeText(formatted).then(() => {
                const original = button.textContent;
                button.textContent = 'Copied';
                setTimeout(() => {
                    button.textContent = original;
                }, 1500);
            });
        }

        document.getElementById('uploadForm').addEventListener('submit', function (e) {
            e.preventDefault();

            const fileInput = document.getElementById('fileInput');
            const file = fileInput.files[0];
            if (!file) return;

            const formData = new FormData();
            formData.append('file', file);

            const xhr = new XMLHttpRequest();
            xhr.open('POST', '/upload', true);

            const progressBar = document.getElementById('progressBar');
            const progressText = document.getElementById('progressText');
            const uploadStatus = document.getElementById('uploadStatus');
            const resultMessage = document.getElementById('resultMessage');

            uploadStatus.style.display = 'block';
            progressBar.value = 0;
            progressText.textContent = '0%';
            resultMessage.innerHTML = '';
            resultMessage.style.display = 'none';

            xhr.upload.addEventListener('progress', function (e) {
                if (e.lengthComputable) {
                    const percentComplete = Math.round((e.loaded / e.total) * 100);
                    progressBar.value = percentComplete;
                    progressText.textContent = percentComplete + '%';
                }
            });

            xhr.onload = function () {
                try {
                    const response = JSON.parse(xhr.responseText);
                    if (xhr.status === 200) {
                        resultMessage.innerHTML = `
                            <div>
                                <a href="${response.downloadUrl}" id="downloadUrl" style="display:none;">${response.downloadUrl}</a>
                                <span id="passwordText" style="display:none;">${response.password}</span>
                                <h3>Upload Successful</h3>
                                <button onclick="copyCombined(this)">Copy URL & Password</button>
                                <div class="warning-box">
                                    <p>This is the only time you'll see the password. Save it.</p>
                                </div>
                            </div>
                        `;
                        fileInput.value = '';
                        uploadStatus.style.display = 'none';
                        resultMessage.style.display = 'flex';
                    } else {
                        resultMessage.innerHTML = `<span>${response.error || 'Upload failed. Try again.'}</span>`;
                        resultMessage.style.display = 'block';
                    }
                } catch (e) {
                    resultMessage.innerHTML = "<span>Unexpected response from server.</span>";
                    resultMessage.style.display = 'block';
                }
            };

            xhr.onerror = function () {
                resultMessage.innerHTML = "<span>An error occurred during the upload.</span>";
                resultMessage.style.display = 'block';
            };

            xhr.send(formData);
        });
    </script>
</body>

</html>

<style>
    :root {
        --main-bg: #011627;
        --dark-bg: #000e1f;
        --light-bg: #0b253b;
        --text: #d6deeb;
        --accent: #82aaff;
        --heading: #ffffff;
        --opacity: 50%;
        --border-color: color-mix(in srgb, currentColor var(--opacity), transparent);
        --radius: 10px;
        --table-border-width: 1px;
    }

    body {
        margin: 0;
        font-family: sans-serif;
        background-color: var(--main-bg);
        color: var(--text);
        display: flex;
        flex-direction: column;
        height: 100vh;
    }

    main {
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    #upload {
        min-width: 500px;
        max-width: 600px;
        margin: 50px auto;
        background-color: var(--light-bg);
        padding: 2rem;
        border-radius: var(--radius);
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    h2,
    h3 {
        color: var(--heading);
        margin: 0 0 1rem 0;
    }

    form {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    input[type="file"] {
        background-color: var(--dark-bg);
        color: var(--text);
        padding: 0.75rem;
        border: 1px solid var(--border-color);
        border-radius: var(--radius);
    }

    button {
        background-color: var(--accent);
        color: var(--dark-bg);
        padding: 8px 10px;
        width: 100%;
        margin: 10px 0px;
        border: none;
        border-radius: 5px;
        font-weight: bold;
        cursor: pointer;
    }

    #uploadStatus {
        background-color: var(--dark-bg);
        padding: 1rem;
        border: 1px solid var(--border-color);
        border-radius: var(--radius);
    }

    #progressBar {
        width: 100%;
        height: 1rem;
        border-radius: var(--radius);
    }

    #progressText {
        text-align: center;
        margin-top: 0.5rem;
        color: var(--text);
    }

    #resultMessage {
        background-color: var(--dark-bg);
        padding: 1.5rem;
        border: 1px solid var(--border-color);
        border-radius: var(--radius);
        display: none;
        flex-direction: column;
        gap: 1rem;
    }

    .warning-box {
        background-color: var(--light-bg);
        padding: 1rem;
        border: 1px solid var(--border-color);
        border-radius: var(--radius);
        font-size: 0.9rem;
        opacity: 0.8;
    }
</style>
===== templates/login.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
  <th:block th:replace="~{fragments/header :: head}"></th:block>
  <link rel="stylesheet" th:href="@{/css/login.css}" />
</head>


<body>

  <div th:replace="~{fragments/header :: header}"></div>

  <main id="container">
    <main id="login">
      <h2>Login</h2>
      <form th:action="@{/login}" method="post">
        <div>
          <label>Username:</label>
          <input type="text" name="username" required>
        </div>
        <div>
          <label>One-Time Code:</label>
          <input type="password" name="password" placeholder="Enter TOTP code" required>
        </div>
        <div class="btn-container">
          <button type="submit">Login</button>
        </div>
        <div th:if="${error}">
          <p th:text="${error}"></p>
        </div>
      </form>
    </main>
  </main>

  <div th:replace="~{fragments/footer :: footer}"></div>

</body>
</html>

===== templates/error.html =====

===== templates/chat.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
  <th:block th:replace="~{fragments/header :: head}"></th:block>
  <link rel="stylesheet" th:href="@{/css/chat.css}" />
</head>


<body>
    <div th:replace="~{fragments/header :: header}"></div>

    <div class="chat">
        <h2>Chat Room</h2>
        <p th:text="'Logged in as: ' + ${session.user}"></p>
        <ul id="messageArea">
            <li th:each="msg : ${messages}" 
                th:data-sender="${msg.sender}" 
                th:data-iv="${msg.iv}"
                th:data-content="${msg.content}"
                th:data-timestamp="${#dates.format(msg.timestamp, 'yyyy-MM-dd''T''HH:mm:ss.SSS''Z''')}">
                [Encrypted message...]
            </li>
        </ul>

        <div class="chat-controls">
            <form id="chatForm" autocomplete="off">
                <div class="input-and-buttons-container">
                    <div id="messageInputContainer">
                        <input type="text" id="messageInput" placeholder="Type your message" autocomplete="off">
                    </div>
                    <button type="submit">Send</button>

                    <div style="position: relative;">
                        <button type="button" id="emojiToggleBtn">😀</button>
                        <div id="emojiPicker" class="emoji-picker" style="display: none;"></div>
                    </div>

                    <div>
                        <button type="button" onclick="document.getElementById('fileInput').click();">Upload</button>
                        <input type="file" id="fileInput" accept="image/*,video/*" style="display: none;">
                    </div>
                </div>
            </form>
        </div>
    </div>

    <div th:replace="~{fragments/footer :: footer}"></div>

    <script src="https://cdn.jsdelivr.net/npm/sockjs-client@1/dist/sockjs.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/stompjs@2.3.3/lib/stomp.min.js"></script>
    <script type="module" src="/js/chat-main.js"></script>
    <script type="module" src="/js/session-checker.js"></script>

    <script th:inline="javascript">
        /*<![CDATA[*/
        window.chatConfig = {
            username: /*[[${session.user}]]*/ 'guest'
        };
        window.chatUsernames = [[${ usernames }]];
        /*]]>*/
    </script>

    <script>document.getElementById('messageInput').focus();</script>
</body>
</html>

===== templates/drop.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<meta name="viewport" content="width=device-width, initial-scale=1.0" />

<head th:replace="~{fragments/header :: head}"></head>

<body>
    <div th:replace="~{fragments/header :: header}"></div>
    <link rel="stylesheet" th:href="@{/css/style.css}">

    <h2>Danger Zone: DROP ALL DATA</h2>

    <p>This will:</p>
    <ul>
        <li>Delete all uploaded files</li>
        <li>Log out all users</li>
        <li>Delete all registration codes</li>
        <li>Delete all user accounts</li>
    </ul>

    <p><strong>This action is irreversible.</strong></p>

    <form th:action="@{/drop}" method="post">
        <!-- CSRF token -->
        <input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}" />

        <button type="submit">
            Confirm & Drop Everything
        </button>
    </form>

    <div th:replace="~{fragments/footer :: footer}"></div>
</body>

</html>
